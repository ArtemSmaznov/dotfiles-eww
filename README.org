:PROPERTIES:
:ID:       08dab5c6-188b-4891-b65f-2637d6d3bd4a
:ROAM_ALIASES: eww
:END:
#+title:       Elkowar's Wacky Widgets
#+author:      Artem Smaznov
#+description: Standalone widget system that allows you to implement your own, custom widgets in any window manager
#+startup:     overview
#+auto_tangle: t

* Table of Contents
- [[#variables][Variables]]
- [[#status-bars][Status-bars]]
  - [[#main][Main]]
  - [[#secondary][Secondary]]
  - [[#widgets][Widgets]]
- [[#--------------][--------------]]
- [[#07-panels][Panels]]
  - [[#strt-power-menu][STRT Power Menu]]
  - [[#notification-tray][Notification Tray]]
  - [[#idea-launcher][IDEA Launcher]]
  - [[#quick-settings][Quick Settings]]
  - [[#multi-media][Multi-media]]
  - [[#profile][Profile]]
  - [[#idea-office][IDEA Office]]
- [[#widget-templates][Widget Templates]]
  - [[#icon][Icon]]
  - [[#slider][Slider]]
  - [[#circular-progress][Circular Progress]]
  - [[#confirmation-window][Confirmation Window]]
- [[#calendar][Calendar]]

* Theme
#+begin_src scss :tangle eww.scss
@import "themes/base16.scss";

$text-font: "Hack Nerd Font",
            "Source Han Sans JP",
            "Font Awesome 6 Free Solid",
            "FontAwesome",
            "Roboto";
$icon-font: "Font Awesome 6 Free Solid";

$indicator-line-width: 3px;
$accent-line-width: 2px;

,* {
    all: unset;
}

.main-bar,
.second-bar,
.powermenu-panel {
    background-color: rgba($base00, 0.2);
}

.gray                   { color: $base04; }
.white                  { color: $base07; }
.red,    .state-urgent  { color: $base08; }
.orange                 { color: $base09; }
.yellow, .state-warning { color: $base0A; }
.green,  .state-good    { color: $base0B; }
.cyan                   { color: $base0C; }
.blue                   { color: $base0D; }
.purple                 { color: $base0E; }
.special                { color: $base0F; }

.shutdown    { color: $base08; }
.reboot      { color: $base0A; }
.suspend     { color: $base0D; }
.lock-screen { color: $base0C; }
.log-out     { color: $base0B; }

button:hover {
    transition-duration: .35s;
}
#+end_src

* Variables
** States
#+begin_src yuck :tangle eww.yuck
(include "vars/states.yuck")
#+end_src

#+begin_src yuck :tangle vars/states.yuck
(defvar show-power-menu false)
#+end_src

** Theme
#+begin_src yuck :tangle eww.yuck
(include "vars/theme.yuck")
#+end_src

#+begin_src yuck :tangle vars/theme.yuck
(defvar status-bar-size 35)
(defvar revealer-duration ".35s")
(defvar status-bar-widget-spacing 2)
(defvar status-bar-icon-spacing 10)
(defvar status-bar-graph-width 40)
#+end_src

** Images
#+begin_src yuck :tangle eww.yuck
(include "vars/images.yuck")
#+end_src

#+begin_src yuck :tangle vars/images.yuck
(defvar profile-face   "/home/artem/.face")
(defvar no-album-cover "/home/artem/music/no-cover")
#+end_src

** Scripts
#+begin_src yuck :tangle eww.yuck
(include "vars/scripts.yuck")
#+end_src

#+begin_src yuck :tangle vars/scripts.yuck
(defvar scripts "~/.local/bin")
(defvar dm-scripts "~/.local/bin/dm-scripts")

(defvar hypr-scripts "~/.config/hypr/scripts")
#+end_src

** Player
#+begin_src yuck :tangle eww.yuck
(include "vars/player.yuck")
#+end_src

Player info
#+begin_src yuck :tangle vars/player.yuck
(deflisten player-name
           :initial "mpd"
           "~/.local/bin/listen-player.sh player")

(deflisten player-state
           :initial "stopped"
           "~/.local/bin/listen-player.sh state")

(deflisten player-volume
         :iniitial "-%"
         "~/.local/bin/listen-player.sh volume")
#+end_src

Track info
#+begin_src yuck :tangle vars/player.yuck
(deflisten player-title
           :initial ""
           "~/.local/bin/listen-player.sh title")

(deflisten player-artist
           :initial ""
           "~/.local/bin/listen-player.sh artist")

(deflisten player-album
           :initial ""
           "~/.local/bin/listen-player.sh album")
#+end_src

** Music
#+begin_src yuck :tangle eww.yuck
(include "vars/music.yuck")
#+end_src

Player info
#+begin_src yuck :tangle vars/music.yuck
(deflisten music-state
           :initial "stopped"
           "~/.local/bin/listen-player.sh state mpd")

(deflisten music-volume
         :iniitial "-%"
         "~/.local/bin/listen-player.sh volume mpd")
#+end_src

Flags
#+begin_src yuck :tangle vars/music.yuck
(deflisten music-flag-loop
           :initial "None" ;; playlist | track
           "~/.local/bin/listen-player.sh loop mpd")

(deflisten music-flag-shuffle
           :initial false ;; true
           "~/.local/bin/listen-player.sh shuffle mpd")

(deflisten music-flags
           :initial "[------]" ;; [rzscxU]
           "~/.local/bin/listen-player.sh flags mpd")

(deflisten music-flag-repeat
           :initial "-" ;; r
           "~/.local/bin/listen-player.sh repeat mpd")

(deflisten music-flag-random
           :initial "-" ;; z
           "~/.local/bin/listen-player.sh random mpd")

(deflisten music-flag-single
           :initial "-" ;; s
           "~/.local/bin/listen-player.sh single mpd")

(deflisten music-flag-consume
           :initial "-" ;; c
           "~/.local/bin/listen-player.sh consume mpd")

(deflisten music-flag-crossfade
           :initial "-" ;; x
           "~/.local/bin/listen-player.sh crossfade mpd")

(deflisten music-flag-update
           :initial "-" ;; u
           "~/.local/bin/listen-player.sh update mpd")
#+end_src

Track info
#+begin_src yuck :tangle vars/music.yuck
(deflisten music-title
           :initial ""
           "~/.local/bin/listen-player.sh title mpd")

(deflisten music-artist
           :initial ""
           "~/.local/bin/listen-player.sh artist mpd")

(deflisten music-album
           :initial ""
           "~/.local/bin/listen-player.sh album mpd")

(defpoll music-track-progress
           :interval "1s"
           :initial 0
           :run-while { music-state == "playing" }
           "~/.local/bin/get-music.sh progress")

(deflisten music-track-file
           :initial ""
           "~/.local/bin/listen-player.sh track_file mpd")

(deflisten music-rating
           :initial 0
           "~/.local/bin/listen-player.sh rating")

(deflisten music-play-count
           :initial 0
           "~/.local/bin/listen-player.sh play_count")

(deflisten music-skip-count
           :initial 0
           "~/.local/bin/listen-player.sh skip_count")

(deflisten music-last-played
           :initial 0
           "~/.local/bin/listen-player.sh last_played")
#+end_src

Album cover art
#+begin_src yuck :tangle vars/music.yuck
(deflisten music-album-cover-file
           :initial "/home/artem/music/no-cover"
           "~/.local/bin/listen-player.sh cover_file mpd")

(deflisten music-album-cover-color
         "~/.local/bin/listen-player.sh cover_color mpd")
#+end_src

** Time
#+begin_src yuck :tangle eww.yuck
(include "vars/time.yuck")
#+end_src

#+begin_src yuck :tangle vars/time.yuck
(defpoll time
         :interval "1s"
         :initial "0:00 AM"
         "date '+%-l:%M %p'")

(defpoll date
         :interval "1h"
         :initial "1 jan 1970"
         "date '+%a, %-d-%b-%y'")

(defpoll year
         :interval "24h"
         "date +%Y")
#+end_src

** Systray
#+begin_src yuck :tangle eww.yuck
(include "vars/systray.yuck")
#+end_src

#+begin_src yuck :tangle vars/systray.yuck
(defpoll trayer-width
         :interval "2s"
         :initial "0"
         :run-while true
         "~/.local/bin/get-trayer-width.sh")
#+end_src

** Keyboard
#+begin_src yuck :tangle eww.yuck
(include "vars/keyboard.yuck")
#+end_src

#+begin_src yuck :tangle vars/keyboard.yuck
(defpoll kbd
         :interval "1s"
         :initial "us"
         "~/.local/bin/get-lang.sh")
#+end_src

** System
#+begin_src yuck :tangle eww.yuck
(include "vars/system.yuck")
#+end_src

*** Updates
#+begin_src yuck :tangle vars/system.yuck
(defpoll updates
         :interval "5s"
         :initial 0
         "~/.local/bin/get-updates.sh")

(defpoll update-flags
         :interval "5s"
         :initial ""
         "~/.local/bin/get-update-flags.sh")

(defpoll updates-list-content
         :interval "15m"
         "cat /var/cache/pacman/updates")
#+end_src

*** Battery
#+begin_src yuck :tangle vars/system.yuck
(defpoll charge
         :interval "10s"
         :iniitial 50
         "~/.local/bin/get-battery.sh percentage battery_ps_controller_battery_a0oabo51o62o65o1d")

(defpoll present
         :interval "10s"
         :iniitial 50
         "~/.local/bin/get-battery.sh present battery_ps_controller_battery_a0oabo51o62o65o1d")

(defpoll state
         :interval "10s"
         :iniitial 50
         "~/.local/bin/get-battery.sh state battery_ps_controller_battery_a0oabo51o62o65o1d")

(defpoll warning-level
         :interval "10s"
         :iniitial 50
         "~/.local/bin/get-battery.sh warning-level battery_ps_controller_battery_a0oabo51o62o65o1d")
#+end_src

*** Network
#+begin_src yuck :tangle vars/system.yuck
(defvar graph_net_time_range "10m")
(defvar graph_net_max_speed_bytes { 150 * 1024 * 1024 / 8 })

(defpoll interface
         :interval "1m"
         "~/.local/bin/get-network-interface.sh")
#+end_src

*** Volume
#+begin_src yuck :tangle vars/system.yuck
(defpoll volume
         :interval "1s"
         :iniitial 50
         "~/.local/bin/get-volume.sh")

(defpoll mute
         :interval "1s"
         :iniitial "off"
         "~/.local/bin/get-mute.sh")
#+end_src

*** Uptime
#+begin_src yuck :tangle vars/system.yuck
(defpoll uptime
         :interval "1m"
         :initial "0d 0h"
         "~/.local/bin/get-uptime.sh")
#+end_src

** WM
#+begin_src yuck :tangle eww.yuck
(include "vars/wm.yuck")
#+end_src

Workspaces
#+begin_src yuck :tangle vars/wm.yuck
(defpoll listen_workspaces
         :interval "1s"
         :initial "[]"
         "bash ~/.config/hypr/scripts/get-workspaces.sh")
#+end_src

Window Title
#+begin_src yuck :tangle vars/wm.yuck
(deflisten window-title
           "bash ~/.config/hypr/scripts/listen-window-title.sh")
#+end_src

Layout
#+begin_src yuck :tangle vars/wm.yuck
(deflisten wm-layout
           "~/.local/bin/listen-wm-layout.sh")

(defpoll wm-layout-2
         :interval "1s"
         :iniitial ""
         "~/.local/bin/get-wm-layout.sh")
#+end_src

Key Chord
#+begin_src yuck :tangle vars/wm.yuck
(deflisten wm-key-chord
           :initial ""
           "bash ~/.config/hypr/scripts/listen-submap.sh")
#+end_src

* Status-bars
** Styles
#+begin_src scss :tangle eww.scss
@import "modules/status-bars/style.scss";
#+end_src

#+begin_src scss :tangle modules/status-bars/style.scss
.bar {
  color: $base07;
  font-family: $text-font;
  font-size: 12pt;
  text-shadow: 1 1 $base00;
}

.leftside  { padding-left:  7px }
.rightside { padding-right: 7px }

.status-widget {
  padding: 0 7px;
}

.status-widget.colored.1 { box-shadow: inset 0 -$accent-line-width $base08 }
.status-widget.colored.2 { box-shadow: inset 0 -$accent-line-width $base09 }
.status-widget.colored.3 { box-shadow: inset 0 -$accent-line-width $base0A }
.status-widget.colored.4 { box-shadow: inset 0 -$accent-line-width $base0B }
.status-widget.colored.5 { box-shadow: inset 0 -$accent-line-width $base0C }
.status-widget.colored.6 { box-shadow: inset 0 -$accent-line-width $base0D }
.status-widget.colored.7 { box-shadow: inset 0 -$accent-line-width $base0E }

.widget.colored.1 { box-shadow: inset 0 -$accent-line-width $base08 }
.widget.colored.2 { box-shadow: inset 0 -$accent-line-width $base09 }
.widget.colored.3 { box-shadow: inset 0 -$accent-line-width $base0A }
.widget.colored.4 { box-shadow: inset 0 -$accent-line-width $base0B }
.widget.colored.5 { box-shadow: inset 0 -$accent-line-width $base0C }
.widget.colored.6 { box-shadow: inset 0 -$accent-line-width $base0D }
.widget.colored.7 { box-shadow: inset 0 -$accent-line-width $base0E }

.icon,
.workspaces button { font: 12pt $icon-font }

.shutdown,
.reboot,
.suspend,
.lock-screen,
.log-out {
  font-size: 14pt;
}

.ws-urgent       { color: $base08; }
.ws-current-main { border-top: 2px solid $base0E; border-bottom: 2px solid $base00; }
.ws-current-side { border-top: 2px solid $base00; border-bottom: 2px solid $base0F; }
.ws-filled       { color: $base07; }
.ws-empty        { color: $base02; }

#+end_src

** Primary
#+begin_src yuck :tangle eww.yuck
(include "modules/status-bars/primary.yuck")
#+end_src

#+begin_src yuck :tangle modules/status-bars/primary.yuck
(defwindow main-bar
           :monitor 0
           :stacking "fg"
           :geometry (geometry :anchor "top center"
                               :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "35px")
           ;; wayland
           :exclusive true
           ;; x11
           :windowtype "dock"
           :reserve (struts :side "top"
                            :distance "35px")

           (centerbox :orientation "h"
                      :class "bar"
                      (box :class "leftside"
                           :orientation "h"
                           :space-evenly false
                           :halign "start"
                           :spacing 5
                           (logo)
                           (separator)
                           (time)
                           (separator)
                           (workspaces)
                           (separator)
                           wm-layout-2
                           (separator)
                           (key-chord))

                      (box :class "center"
                           :orientation "h"
                           :space-evenly false
                           :halign "center"
                           :spacing 5
                           (window-title)
                           (separator)
                           (player))

                      (box :orientation "h"
                           :space-evenly false
                           :halign "end"
                           :spacing 5
                           (kbd)
                           (sys-tray)
                           (separator)
                           (battery)
                           (updates)
                           (network)
                           (ram)
                           (cpu)
                           (cpu-thermal)
                           (volume)
                           (separator)
                           (date)
                           (profile))))
#+end_src

** Secondary
#+begin_src yuck :tangle eww.yuck
(include "modules/status-bars/secondary.yuck")
#+end_src

#+begin_src yuck :tangle modules/status-bars/secondary.yuck
(defwindow second-bar
           :monitor 1
           :stacking "fg"
           :geometry (geometry :anchor "top center"
                               :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "30px")

           ;; wayland
           :exclusive true
           ;; x11
           :windowtype "dock"
           :reserve (struts :side "top"
                            :distance "30px")

           (centerbox :orientation "h"
                      :class "bar"

                      (box :class "leftside"
                           :orientation "h"
                           :space-evenly false
                           :halign "start"
                           :spacing 5
                           (logo)
                           (time)
                           (separator)
                           (workspaces)
                           (separator)
                           (key-chord))

                      ;; center
                      (player)

                      (box :class "rightside"
                           :orientation "h"
                           :space-evenly false
                           :halign "end"
                           :spacing 5
                           (kbd)
                           (separator)
                           (battery)
                           (cpu-thermal)
                           (volume)
                           (separator)
                           (date)
                           (separator)
                           (uptime))))
#+end_src

** Widgets
#+begin_src yuck :tangle eww.yuck
(include "modules/status-bars/widgets.yuck")
#+end_src
*** Separator
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.separator {
  color: $base03;
  text-shadow: none;
  padding: 0 1px;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget separator []
  (box :class "status-bar-widget separator"
       :orientation "h"
       :halign "center"
       "|"))
#+end_src

*** Logo
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.widget.logo {
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget logo []
           (eventbox :cursor "pointer"
                     :onclick "wofi --show drun"
                     (image :class "status-bar-widget logo"
                            :path "/home/artem/.local/share/icons/Papirus-Dark/64x64/apps/distributor-logo-archlinux.svg"
                            :image-height "30")))
#+end_src

*** Time
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.widget.time {
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget time []
  (box :class "widget time"
       :orientation "h"
       :space-evenly false
    {time}))
#+end_src

*** Workspaces
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.workspaces {
}

.workspace-entry {
  font: 12pt $icon-font;
  padding: 0 7px;
}

.workspace-entry.empty {
  color: $base07;
  opacity: 0.4;
}
.workspace-entry.occupied {
  color: $base07;
}
.workspace-entry.urgent {
  color: $base08;
}

.workspace-entry.monitor_0 {
  background-color: $base03;
  box-shadow: inset 0 -$indicator-line-width $base0E;
}
.workspace-entry.monitor_1 {
  box-shadow: inset 0 -$indicator-line-width $base04;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget workspaces []
           (box :class "bar-widget bar-widget-workspaces"
                :space-evenly false
                :spacing status-bar-widget-spacing

                (for workspace in listen_workspaces
                     (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                               (box :class "workspace-entry ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.monitor == 0 ? "monitor_0": ""} ${workspace.monitor == 1 ? "monitor_1": ""}"
                                    (label :text { workspace.name == 1 ? "globe"        :
                                                   workspace.name == 2 ? "gamepad"      :
                                                   workspace.name == 3 ? "keyboard"     :
                                                   workspace.name == 4 ? "folder"       :
                                                   workspace.name == 5 ? "headphones"   :
                                                   workspace.name == 6 ? "camera"       :
                                                   workspace.name == 7 ? "comment"      :
                                                   workspace.name == 8 ? "server"       :
                                                   workspace.name == 9 ? "chart-simple" :
                                                                          workspace.name }))))))
#+end_src

*** Layout
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
#+end_src

*** Key Chord
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.widget.key-chord {
    color: $base01;
    background: $base0A;
    font-weight: bold;
    padding: 7px;
    text-shadow: none;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget key-chord []
           (revealer :transition "slideleft"
                     :duration revealer-duration
                     :reveal { wm-key-chord != "" }
                     (label :class "widget key-chord"
                            :text wm-key-chord)))
#+end_src

*** Title
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget window-title []
  (label :limit-width 40
         :text window-title))
#+end_src

*** Player
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.widget.player {
  font-family: $text-font;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget player []
           (eventbox :onclick "eww open --toggle status-panel"
                     :cursor "pointer"
                     (box :class "widget player"
                          :orientation "h"
                          :space-evenly false
                          :spacing status-bar-icon-spacing
                          :halign "center"

                          (icon :icon { player-state == "stopped" ? "stop" :
                                        player-state == "playing" ? "play" :
                                                                    "pause" })
                          (label :text "·")

                          (revealer :transition "slideright"
                                    :duration revealer-duration
                                    :reveal { player-artist != "" }
                                    (box :orientation "h"
                                         :space-evenly false
                                         :spacing status-bar-icon-spacing
                                         (label :class "player-artist"
                                                :limit-width 50
                                                :text player-artist)
                                         (label :text "-")))

                          (label :class "player-title"
                                 :limit-width 50
                                 :text player-title)

                          (revealer :transition "slideright"
                                    :duration revealer-duration
                                    :reveal { player-name == "mpd" }
                                    (box :orientation "h"
                                         :space-evenly false
                                         :spacing status-bar-icon-spacing
                                         (label :text "·")
                                         (label :class "music-flags"
                                                :text music-flags)))

                          (label :text "·")
                          (label :class "player-volume"
                                 :text "${replace(round(player-volume, 2), '0.', '')}%"))))
#+end_src

*** System Tray
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget sys-tray []
  (box :orientation "h"
       :visible { trayer-width != 0 ? true : false }
       :space-evenly false
       (separator)
       (box :orientation "h"
            :width trayer-width)))
#+end_src

*** Language
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget kbd []
  (box :orientation "h"
       :space-evenly false
       :class "widget language"
       (flag :lang kbd)))

(defwidget flag [?lang]
  (image :image-height "18"
         :path "/usr/share/iso-flag-png/${lang}.png"))
#+end_src

*** Battery
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget battery []
  (revealer :transition "slideright"
            :duration revealer-duration
            :reveal {present == "yes" ? true : false}
            (box :class "widget colored 7 volume"
                (slider :icon "gamepad"
                    :value charge
                    :onchange ""
                    ))))
#+end_src

*** Updates
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.status-widget .updates,
.status-widget .update-flags {
    padding-left: 7px;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget updates []
           (eventbox :onclick "eww open --toggle updates-list"
                     :cursor "pointer"
                     (box :class { updates ==   0  ? "status-widget colored 6 state-good"  :
                                   updates ==  69  ? "status-widget colored 6 red"         :
                                   updates == 101  ? "status-widget colored 6 orange"      :
                                   updates == 220  ? "status-widget colored 6 yellow"      :
                                   updates == 360  ? "status-widget colored 6 blue"        :
                                   updates == 404  ? "status-widget colored 6 yellow"      :
                                   updates == 420  ? "status-widget colored 6 green"       :
                                   updates == 555  ? "status-widget colored 6 green"       :
                                   updates == 1001 ? "status-widget colored 6 purple"      :
                                   updates == year ? "status-widget colored 6 special"     :
                                                     "status-widget colored 6"             }

                          :orientation "h"
                          :space-evenly false
                          (icon :icon { updates ==   0  ? "check"    :
                                        updates ==  69  ? "heart"    :
                                        updates == 101  ? "book"     :
                                        updates == 220  ? "bolt"     :
                                        updates == 360  ? "globe"    :
                                        updates == 404  ? "warning"  :
                                        updates == 420  ? "cannabis" :
                                        updates == 555  ? "dollar"   :
                                        updates == 1001 ? "moon"     :
                                        updates == year ? "calendar" :
                                                          "bell" })

                          (revealer :class { updates ==  69  ? "updates"               :
                                             updates == 101  ? "updates"               :
                                             updates == 220  ? "updates"               :
                                             updates == 360  ? "updates"               :
                                             updates == 404  ? "updates"               :
                                             updates == 420  ? "updates"               :
                                             updates == 555  ? "updates"               :
                                             updates == 1001 ? "updates"               :
                                             updates == year ? "updates"               :
                                             updates >= 900  ? "updates state-urgent"  :
                                             updates >= 400  ? "updates state-warning" :
                                                               "updates" }
                                    :transition "slideright"
                                    :reveal { updates > 0 }
                                    :duration revealer-duration
                                    updates )

                          (revealer :class "yellow update-flags"
                                    :transition "slideright"
                                    :reveal { update-flags != "" }
                                    :duration revealer-duration
                                    update-flags))))
#+end_src

*** Network
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.graph.net-down {
  color: $base0D;
}

.graph.net-up {
  color: $base0A;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget network []
           (box :class "status-widget colored 5 network"
                :space-evenly false
                :spacing status-bar-icon-spacing

                (icon :icon "ethernet")
                (graph :min 0
                       :width status-bar-graph-width
                       :class "graph net-down"
                       :time-range {graph_net_time_range}
                       :dynamic false
                       :max {graph_net_max_speed_bytes}
                       :thickness 2
                       :line-style "round"
                       :value {EWW_NET.eno1.NET_DOWN})
                ;; :value {EWW_NET[interface].NET_DOWN})
                (icon :icon "⇵")
                (graph :min 0
                       :width status-bar-graph-width
                       :class "graph net-up"
                       :time-range {graph_net_time_range}
                       :dynamic false
                       :max {graph_net_max_speed_bytes}
                       :thickness 2
                       :value {EWW_NET.eno1.NET_UP})))
;; :value {EWW_NET[interface].NET_UP})))
#+end_src

*** RAM
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget ram []
           (box :class "status-widget colored 4 volume"
                (slider :icon "memory"
                        :value {EWW_RAM.used_mem_perc}
                        :onchange "")))
#+end_src

*** CPU
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget cpu []
           (box :class "status-widget colored 3 volume"
                (slider :icon "microchip"
                        :value {EWW_CPU.avg}
                        :onchange "")))
#+end_src

*** CPU Thermal
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget cpu-thermal []
           (box :class "status-widget colored 2 volume"
                :spacing status-bar-icon-spacing
                (icon :icon "")
                { round(EWW_TEMPS.K10TEMP_TCTL, 0) }
                "°C"))
#+end_src

*** Volume
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget volume []
    (box :class "status-widget colored 1 volume"
        (slider :icon { mute   == "on" ? "volume-xmark" :
                        volume ==  0   ? "volume-off"   :
                        volume <= 40   ? "volume-low"   :
                                        "volume-high"  }
                :value volume
                :onchange "amixer -D pulse sset Master {}%"
                )))
#+end_src

*** Disk Usage
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget disk_usage [?icon disk]
    (slider :icon icon
            :value {round((1 - (EWW_DISK[disk].free / EWW_DISK[disk].total)) * 100, 0)}
            :onchange ""))
#+end_src

*** Uptime
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget uptime []
  (box :orientation "h"
       :space-evenly false
       :spacing status-bar-icon-spacing
       (icon :icon "circle-arrow-up")
       uptime))
#+end_src

*** Date
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget date []
  (eventbox :onclick "eww open --toggle --screen $(/home/artem/.config/hypr/scripts/get-current-monitor.sh id) calendar-window"
            :cursor "pointer"
            (box :class "widget date"
                 :orientation "h"
                 :space-evenly false
                 :halign "center"
                 :spacing status-bar-icon-spacing

                 (icon :icon { matches(date, "20 apr") ? "cannabis" :
                               matches(date, "25 dec") ? "candy-cane" :
                               matches(date, "31 dec") ? "champagne-glasses" :
                                                         "calendar" })
                 {date})))
#+end_src

*** Profile
**** styles
#+begin_src scss :tangle modules/status-bars/style.scss
.profile {
}

.profile-face {
    margin: 5px;

    background-size: cover;
    background-position: center;

    border-radius: 50%;
    border: 2px solid $base04;
}
#+end_src

**** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget profile []
           (eventbox :class "status-bar-widget profile"
                     :onclick "eww open --toggle powermenu-panel"
                     :cursor "pointer"

                     (box :class "profile-face"
                          :width status-bar-size
                          :height status-bar-size
                          :style "background-image: url('${profile-face}');")))
#+end_src

* Panels
** Power Menu
#+begin_src yuck :tangle eww.yuck
(include "modules/panels/powermenu.yuck")
#+end_src
*** styles
#+begin_src scss :tangle eww.scss
@import "modules/panels/powermenu.scss";
#+end_src

#+begin_src scss :tangle modules/panels/powermenu.scss
.overlay {
    color: $base07;
    font-family: $text-font;
}

.powermenu-button {
    background-color: $base03;
    font-family: $icon-font;
    font-size: 64pt;
    border-radius: 20%;
    padding: 40px;
    box-shadow: 0 0 2px $base01;
}

.powermenu-text {
    margin-top: 15px;
    font-size: 16pt;
}

.powermenu.cancel {
    color: $base07;
    border: 3px solid $base07;
    border-radius: 50%;
}

.powermenu.cancel label.icon {
    padding-top: 30px;
    padding-bottom: 10px;
    font-size: 40pt;
}

// hover states
.powermenu-button.shutdown1 {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base08,
                 1px 1px $base08;
}
.powermenu-button.shutdown1:hover {
    color: $base08;
}

.powermenu-button.reboot1 {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base09,
                 1px 1px $base09;
}
.powermenu-button.reboot1:hover {
    color: $base09;
}

.powermenu-button.lock1 {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base0B,
                 1px 1px $base0B;
}
.powermenu-button.lock1:hover {
    color: $base0B;
}

.powermenu-button.suspend1 {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base0E,
                 1px 1px $base0E;
}
.powermenu-button.suspend1:hover {
    color: $base0E;
}

.powermenu-button.signout1 {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base0C,
                 1px 1px $base0C;
}
.powermenu-button.signout1:hover {
    color: $base0C;
}

.powermenu.cancel {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base03,
                 1px 1px $base03;
}
.powermenu.cancel:hover {
    text-shadow: 0px 0px 3px $base03,
                 0px 0px 10px $base07,
                 0px 0px $base07;
}
#+end_src

*** window
#+begin_src yuck :tangle modules/panels/powermenu.yuck
(defwindow powermenu-panel
           :monitor 0
           :stacking "overlay"
           :geometry (geometry :anchor "top center"
                               :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "100%")

           (centerbox :class "overlay"
                      :orientation "v"

                      (box)
                      (box :orientation "h"
                           :halign "center"
                           :spacing 20

                           (powermenu_entry :class "shutdown1"
                                            :icon "power-off"
                                            :label "power off"
                                            :hotkey "p"
                                            :onclick "${dm-scripts}/dm-power poweroff")
                           (powermenu_entry :class "reboot1"
                                            :icon "rotate"
                                            :label "reboot"
                                            :hotkey "r"
                                            :onclick "${dm-scripts}/dm-power reboot")
                           (powermenu_entry :class "suspend1"
                                            :icon "moon"
                                            :label "suspend"
                                            :hotkey "s,z"
                                            :onclick "${dm-scripts}/dm-power suspend")
                           (powermenu_entry :class "signout1"
                                            :icon "right-from-bracket"
                                            :label "sign out"
                                            :onclick "${dm-scripts}/dm-power logout")
                           (powermenu_entry :class "lock1"
                                            :icon "lock"
                                            :label "lock"
                                            :hotkey "l"
                                            :onclick "${dm-scripts}/dm-power lock"))

                      (eventbox :class "powermenu cancel"
                                :halign "center"
                                :valign "center"
                                :width 150
                                :height 150
                                :onclick "eww close powermenu-panel"
                                :cursor "pointer"
                                (box :orientation "v"
                                     :vexpand true
                                     :space-evenly false
                                     (label :class "icon"
                                            :text "xmark")
                                     (label :text "Cancel")))))
#+end_src

*** widgets
#+begin_src yuck :tangle modules/panels/powermenu.yuck
(defwidget powermenu_entry [?class ?icon ?label ?hotkey ?onclick]
           (box :class "powermenu-entry"
                :orientation "v"
                :space-evenly false

                (button :class "powermenu-button ${class}"
                        :onclick {onclick}
                        (label :class "powermenu-icon ${class}"
                               :text {icon}))

                (label :class "powermenu-text"
                       :text {label})

                (label :text { hotkey == "" ? "" : "[${hotkey}]" })))
#+end_src

** Status
#+begin_src yuck :tangle eww.yuck
(include "modules/panels/status.yuck")
#+end_src

*** styles
#+begin_src scss :tangle eww.scss
@import "modules/panels/status.scss";
#+end_src

#+begin_src scss :tangle modules/panels/status.scss
.status-panel {
    background: transparent;
}
#+end_src

*** window
#+begin_src yuck :tangle modules/panels/status.yuck
(defwindow status-panel
           :namespace "status-panel"
           :monitor 1
           :stacking "bottom"
           :geometry (geometry :anchor "bottom left"
                               :x "50px"
                               :y "50px"
                               :width "100px"
                               :height "100px")

           (box :class "status-panel"
                :orientation "v"
                :halign "center"
                :valign "center"
                :space-evenly false
                :spacing 15
                :active true

                (charge-levels)
                (music-player)
                ))
#+end_src

** TODO notification tray
** IDEA launcher
** TODO quick settings
** TODO profile
** IDEA office
*** idea clock
*** idea calendar
*** idea notes
* Modules
** Styles
#+begin_src scss :tangle eww.scss
@import "modules/style.scss";
#+end_src

#+begin_src scss :tangle modules/style.scss
.glass-module {
    background: rgba($base02, 0.4);
    color: $base07;
    padding: 20px;
    border-radius: 1.5rem;
}
#+end_src

** PROJ Clock

** PROJ Calendar
#+begin_src yuck :tangle eww.yuck
(include "modules/panels/calendar.yuck")
#+end_src

*** styles
#+begin_src scss :tangle modules/panels/calendar.scss
calendar {
  padding: 4px;
}

calendar:selected {
  color: $base0E;
  font-weight: bold;
}
#+end_src

*** window
#+begin_src yuck :tangle modules/panels/calendar.yuck
(defwindow calendar-window
           :monitor 0
           :geometry (geometry :x "10px"
                               :y "10px"
                               :anchor "top right")
           :windowtype "dialog"
           :stacking "fg"
           :wm-ignore true
           (calendar :show-details true
                     :show-heading true
                     :show-day-names true
                     :show-week-numbers false))
#+end_src

** PROJ Weather

** Music Player
#+begin_src yuck :tangle eww.yuck
(include "modules/music-player.yuck")
#+end_src
#+begin_src scss :tangle eww.scss
@import "modules/music-player.scss";
#+end_src

*** styles
#+begin_src scss :tangle modules/music-player.scss
.music-player {
    background: rgba($base0E, 0.4);
}

.music-player-album-art-reactive .icon {
    font-size: 64pt;
    border-radius: 1.5rem;
    background: radial-gradient(at center, transparent, $base01);
}

.music-player-album-art {
    $album-art-size: 150px;

    border-radius: 1.5rem;
    background-size: cover;
    background-position: center;
    min-height: $album-art-size;
    min-width: $album-art-size;
}

.music-player-rating-bar {
    margin: 5px 0;
    transition-duration: 3s;
    trough {
        background: $base03;
        min-width: 5px;
        border-radius: 1rem;
        transition-duration: inherit;
        progress {
            background: linear-gradient(to top, $base08, $base04, $base0A);
            min-width: 5px;
            border-radius: 1rem;
            transition-duration: inherit;
        }
    }
}

.music-player-track-title {
    font-size: 20pt;
    font-weight: bold;
}

.music-player-track-artist {
    font-size: 14pt;
    color: lighten($base0E, 20);
    opacity: 0.6;
}

.music-player-track-album {
    font-size: 14pt;
    color: $base05;
    opacity: 0.6;
}

.music-player-controls button:hover {
    background: rgba($base03, 0.8);
    border-radius: 50%;
}

.music-player-progress-bar {
    margin: 0 15px;
    trough {
        background-color: $base03;
        border-radius: 1rem;
        min-height: 7px;
        min-width: 50px;
        highlight {
            background-color: $base07;
            border-radius: 1rem;
        }
        slider {}
    }
}

.music-player-controls button {
    min-width:  40px;
    min-height: 40px;
}

.music-player-controls .icon {
    font-size: 18pt;
}
#+end_src

*** widgets
#+begin_src yuck :tangle modules/music-player.yuck
(defwidget music-player []
           (box :class "glass-module music-player"
                :orientation "h"
                :space-evenly false
                :spacing 15
                :width 600
                ;; :style "background: ${music-album-cover-color};"

                (music-player-album-art)

                (revealer :transition "slideleft"
                          :duration revealer-duration
                          :reveal { music-play-count > 0 || music-skip-count > 0 }
                          (music-player-rating-bar))

                (box :class "music-player-content"
                     :orientation "v"
                     :space-evenly false
                     :hexpand true

                     (box :orientation "h"
                          :hexpand true
                          :vexpand true
                          :space-evenly false
                          :spacing 50
                          (music-player-track-info)
                          (box))

                     (music-player-controls))))


(defwidget music-player-album-art []
           (eventbox :onclick "~/.local/bin/musictl.sh toggle"
                     :cursor "pointer"
                     (overlay :class "music-player-album-art-reactive"
                              (box :class "music-player-album-art"
                                   :hexpand false
                                   :vexpand false
                                   :style "background-image: url('${ music-album-cover-file == '' ? no-album-cover : music-album-cover-file }');")
                              (revealer :transition "crossfade"
                                        :duration revealer-duration
                                        :reveal { music-state != "playing" }
                                        (label :class "icon"
                                               :text { music-state == "paused"  ? "pause" :
                                                                   music-state == "stopped" ? "stop"  :
                                                                   "" } )))))


(defwidget music-player-rating-bar []
           (box :class "music-player-rating"
                :orientation "v"
                :space-evenly false
                :hexpand false
                :vexpand true

                (revealer :transition "slideup"
                          :duration revealer-duration
                          :reveal { music-rating >= 0.9 }
                          (label :class "icon yellow"
                                 :style "margin: 5px 0;"
                                 :text "star"))

                (progress :class "music-player-rating-bar"
                          :orientation "v"
                          :halign "center"
                          :vexpand true
                          :flipped true
                          ;; :style "background-size: 1px 126px;"
                          :value { music-rating * 100 })

                (revealer :transition "slidedown"
                          :duration revealer-duration
                          :reveal { music-rating <= 0.1 }
                          (label :class "icon red"
                                 :style "margin: 5px 0;"
                                 :text "ban"))))


(defwidget music-player-track-info []
           (box :class "music-player-track-info"
                :orientation "v"
                :hexpand true
                :vexpand true
                :space-evenly false

                (box :orientation "v"
                     :hexpand true
                     :space-evenly false
                     (scroll :hscroll true
                             :vscroll false
                             (label :class "music-player-track-title"
                                    :xalign 0
                                    :text music-title))

                     (revealer :transition "slidedown"
                               :duration revealer-duration
                               :reveal { music-artist != "" }

                               (scroll :hscroll true
                                       :vscroll false
                                       (label :class "music-player-track-artist"
                                              :xalign 0
                                              :text music-artist))))

                (box :class "music-player-track-album"
                     :hexpand true
                     :vexpand true
                     :space-evenly false
                     :spacing 10
                     (label :class "icon"
                            :text "record-vinyl")
                     (scroll :hscroll true
                             :vscroll false
                             :hexpand true
                             (label :hexpand true
                                    :xalign 0
                                    :text music-album)))))



(defwidget music-player-controls []
           (box :class "music-player-controls"
                :orientation "h"
                :hexpand true
                :spacing 3
                :space-evenly false

                (eventbox :cursor "pointer"
                          (button :onclick "~/.local/bin/musictl.sh prev"
                                  (label :class "icon"
                                         :halign "center"
                                         :valign "center"
                                         :text "backward-step")))

                (eventbox :cursor "pointer"
                          :hexpand true
                          :vexpand false
                          :valign "center"
                          (scale :class "music-player-progress-bar"
                                 :min 0
                                 :value music-track-progress
                                 :max 100
                                 :active {music-state == "playing"}
                                 :onchange "~/.local/bin/musictl.sh goto {}%"))

                (eventbox :cursor "pointer"
                          (button :onclick "~/.local/bin/musictl.sh next"
                                  (label :class "icon"
                                         :halign "center"
                                         :valign "center"
                                         :text "forward-step")))

                (eventbox :cursor "pointer"
                          (button :onclick "~/.local/bin/musictl.sh random"
                                  (label :class "icon"
                                         :halign "center"
                                         :valign "center"
                                         :style "opacity: ${ music-flag-shuffle ? 1 : 0.3 };"
                                         :text "shuffle")))

                (eventbox :cursor "pointer"
                          (button :onclick "~/.local/bin/musictl.sh single"
                                  (label :class "icon"
                                         :halign "center"
                                         :valign "center"
                                         :style "opacity: ${ music-flag-loop != 'none' ? 1 : 0.3 };"
                                         :text { music-flag-loop == 'track' ? "rotate-right" : "repeat" })))
                ))
#+end_src

** Charge Levels
#+begin_src yuck :tangle eww.yuck
(include "modules/charge-levels.yuck")
#+end_src
#+begin_src scss :tangle eww.scss
@import "modules/charge-levels.scss";
#+end_src

*** styles
#+begin_src scss :tangle modules/charge-levels.scss
#+end_src

*** widgets
#+begin_src yuck :tangle modules/charge-levels.yuck
(defwidget charge-levels []
           (box :class "charge-levels"
                :orientation "v"
                :space-evenly true
                :spacing 10
                :width 300
                :height 300

                (radial-battery :device-name "PS Magma"
                                :device-icon "gamepad"
                                :charge 35)

                (radial-battery :device-name "PS Onyx"
                                :device-icon "gamepad"
                                :charge 75)
                ))

(defwidget radial-battery [?device-name ?device-icon ?charge]
           (revealer :transition "slideup"
                     :duration revealer-duration
                     :reveal { device-name != "" }
                     (box :class "glass-module radial-battery"
                          :orientation "v"

                          (overlay
                           (circular-progress :clockwise true
                                              :thickness 2.0
                                              :start-at 75
                                              :value charge)

                           (box :orientation "v"
                                (icon :icon device-icon)
                                (label :text device-name))))))
#+end_src

** STRT Updates List
#+begin_src yuck :tangle eww.yuck
(include "modules/updates-list.yuck")
#+end_src
#+begin_src scss :tangle eww.scss
// @import "modules/updates-list.scss";
#+end_src

*** styles
*** widgets
#+begin_src yuck :tangle modules/updates-list.yuck
(defwindow updates-list
           :monitor 0
           :geometry (geometry :x "650px"
                               :y "10px"
                               :anchor "top right")
           :stacking "overlay"
                   (label :text updates-list-content))
#+end_src

** PROJ Cava

* widget templates
** icon
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget icon [?icon]
  (label :class "icon"
         :text icon))
#+end_src

** slider
*** styles
#+begin_src scss :tangle eww.scss
.slider scale trough {
  background-color: $base02;
  border-radius: 50px;
  min-height: 3px;
  min-width: 50px;
}

.slider scale trough highlight {
  background-color: $base0E;
  color: $base07;
  border-radius: 10px;
}
#+end_src

*** widgets
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget slider [icon value onchange]
           (box :class "slider status-widget"
                :orientation "h"
                :space-evenly false
                :spacing status-bar-icon-spacing

                (icon :icon icon)
                (scale :min 0
                       :max 100
                       :active {onchange != ""}
                       :value value
                       :onchange onchange)))
#+end_src

** circular progress
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwidget circular [icon value]
  (box :orientation "h"
       :class "progress status-widget"
       :space-evenly false
       (icon :icon icon)
       (circular-progress :value value
                          :start-at 0
                          :thickness 7
                          :clockwise true
                          )))
#+end_src

** confirmation window
#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defwindow confirmation-window
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "300px"
                      :height "100px"
                      :anchor "center")
  :windowtype "dialog"
  :stacking "fg"
  :wm-ignore true
  (confirmation-dialog)
  )
#+end_src

#+begin_src yuck :tangle modules/status-bars/widgets.yuck
(defvar confirmation-message "")
(defvar yes-command "")
(defvar dismiss-command "eww close confirmation-window")

(defwidget confirmation-dialog []
  (box :orientation "v"
       confirmation-message
       (box :orientation "h"
            (button :onclick "${yes-command} & ${dismiss-command}"
                    "yes")
            (button :onclick dismiss-command
                    "no")
       )))
#+end_src

* Scripts
:PROPERTIES:
:header-args: :shebang #!/usr/bin/env bash
:END:
** toggle-status-bar
#+begin_src shell :tangle scripts/toggle-status-bar.sh
[ -z "$1" ] && action="toggle" || action="$1"
[ -z "$2" ] && monitor=0 || monitor="$2"

case "$monitor" in
    0) status_bar="main-bar"   ;;
    1) status_bar="second-bar" ;;
    ,*) status_bar="main-bar"   ;;
esac

case $action in
    open)  eww open "$status_bar"          ;;
    close) eww close "$status_bar"         ;;
    ,*)     eww open --toggle "$status_bar" ;;
esac
#+end_src
