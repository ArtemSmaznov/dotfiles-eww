(defwidget
 weather []
 (revealer :transition "slidedown"
           :duration revealer-duration
           :reveal { weather-current != "" }
           (box :class "quick-setting weather"
                :orientation "h"
                :halign "end"
                :space-evenly false
                :spacing 15

                (weather-location :name { replace(jq(weather-current, '.home'), '\"', '') }
                                  :src weather-current))))


(defwidget
 weather-location [?name src]
 (box :class "glass-module location"
      :orientation "h"
      :halign "end"
      :space-evenly false
      :spacing 40

      (label :class "title"
             :valign "start"
             :text name)

      (box :class "weather-overview"
           :orientation "v"
           :halign "end"
           :space-evenly false

           (box :class "main"
                :orientation "h"
                :valign "end"
                :vexpand true
                :space-evenly false

                (weather-stat :class "main-temp"
                              :widget { round( jq(src, '.main.feels_like'), 0 ) + "째C" })

                (image :image-height 150
                       :valign "end"
                       :path "${ weather-icon-path }/${
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Thunderstorm' ? 'thunderstorm-day' :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Drizzle'      ? 'drizzle'          :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Rain'         ? 'rain'             :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Snow'         ? 'snow'             :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Atmosphere'   ? 'fog'              :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Clear'        ? 'clear-day'        :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Clouds'       ? 'cloudy'           :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Mist'         ? 'mist'             :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Overcast'     ? 'overcast'         :
                            replace(jq(src, '.weather[0].main'), '\"', '') == 'Haze'         ? 'mist'             :
                                                                              'not-available'                     }.svg"))

           (box :class "lo-hi"
                :orientation "h"
                :halign "end"

                (weather-stat :class "blue"
                              :widget { round( jq(src, '.main.temp_min'), 0 ) + "째C" })
                (weather-stat :class "red"
                              :widget { round( jq(src, '.main.temp_max'), 0 ) + "째C" }))

           (weather-stat
            :widget { replace(jq(src, '.weather[0].description'), '\"', '') }))

      (box :class "weather-stats"
           :orientation "v"

           (weather-stat :widget { replace(jq(src, '.weather[0].main'), '\"', '') })

           (weather-stat :icon "temperature-half"
                         :widget { round( jq(src, '.main.temp'), 0 ) + "째C" })

           (weather-stat :icon "wind"
                         :widget { round( jq(src, '.wind.speed'), 0 ) + "?" })

           (weather-stat :icon "droplet"
                         :widget { jq(src, '.main.humidity') + "%" })

           (weather-stat :icon "down-long"
                         :widget { jq(src, '.main.pressure') + " hPa" })

           (weather-stat :icon "cloud"
                         :widget { jq(src, '.clouds') })
           )))

(defwidget
 weather-stat [?icon ?class widget]
 (box :class "stat ${ class }"
      :orientation "h"
      :halign "end"
      :space-evenly false
      :spacing 10

      (label :xalign 1
             :text widget)
      (label :class "icon"
             :text icon)))
